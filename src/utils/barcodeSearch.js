/**
 * Utilidad para buscar informaci√≥n de productos en internet por su c√≥digo de barras
 *
 * Este m√≥dulo permite:
 * 1. Buscar un producto por su c√≥digo de barras en APIs p√∫blicas
 * 2. Extraer informaci√≥n relevante para videojuegos
 */

/**
 * Verifica si hay conexi√≥n a internet
 * @returns {Promise<boolean>} true si hay conexi√≥n, false si no
 */
const checkInternetConnection = async () => {
  try {
    // Intentar acceder a un recurso confiable y r√°pido
    await fetch("https://www.cloudflare.com/cdn-cgi/trace", {
      method: "HEAD",
      mode: "no-cors",
      cache: "no-store",
      timeout: 5000,
    });
    return true;
  } catch (error) {
    console.warn("Sin conexi√≥n a internet:", error.message);
    return false;
  }
};

/**
 * Busca informaci√≥n de un videojuego por su c√≥digo de barras
 * Utiliza una combinaci√≥n de APIs abiertas para encontrar informaci√≥n
 *
 * @param {string} barcode - C√≥digo de barras a buscar
 * @param {Function} updateStatus - Funci√≥n para actualizar el estado de b√∫squeda en la UI
 * @returns {Promise<Object|null>} Informaci√≥n del producto o null si no se encuentra
 */
export const searchProductByBarcode = async (
  barcode,
  updateStatus = () => {}
) => {
  try {
    console.log(`Iniciando b√∫squeda para c√≥digo de barras: ${barcode}`);
    updateStatus("Buscando en base de datos local...");

    // Para asegurar que no haya espacios ni caracteres extra√±os
    barcode = barcode.trim();

    // Si sabemos que es un c√≥digo de Nintendo, podemos tener una lista de productos conocidos
    // Esto es √∫til para casos donde las APIs externas fallan o cambian
    const knownProducts = {
      "045496590444": {
        name: "1-2-Switch - Nintendo Switch",
        description:
          "Juego de fiesta exclusivo para Nintendo Switch que aprovecha las caracter√≠sticas de los Joy-Con para mini-juegos divertidos.",
        price: 49.99,
        stock: 0,
      },
      // Puedes agregar m√°s juegos conocidos aqu√≠
    };

    // Revisar primero si es un producto conocido
    if (knownProducts[barcode]) {
      console.log(
        `Producto encontrado en base de datos local: ${knownProducts[barcode].name}`
      );
      return knownProducts[barcode];
    }

    // Verificar conexi√≥n a internet antes de buscar en APIs externas
    const hasInternet = await checkInternetConnection();
    if (!hasInternet) {
      updateStatus("Sin conexi√≥n a internet. Usando s√≥lo datos locales.");
      console.log(
        "Sin conexi√≥n a internet. No se pueden consultar APIs externas."
      );
      return defaultProductFromBarcode(barcode);
    }

    // Intento 1: Buscar en Open Library por ISBN (√∫til para juegos que tienen ISBN)
    updateStatus("Buscando en OpenLibrary...");
    let productInfo = await searchOpenLibrary(barcode);
    if (productInfo) {
      console.log("Producto encontrado en Open Library");
      return productInfo;
    }

    // Intento 2: Si no se encuentra, buscar en UPC API (prioridad principal)
    updateStatus("Buscando en base de datos UPC...");
    productInfo = await searchUPCItemDB(barcode);
    if (productInfo) {
      return productInfo;
    }

    // Intento 3: Si todo falla, usar la b√∫squeda online
    updateStatus(
      "No se encontr√≥ en bases de datos. Buscando en APIs adicionales..."
    );
    productInfo = await searchProductOnline(barcode);
    if (productInfo) {
      console.log("Referencias encontradas mediante b√∫squeda online");
      return productInfo;
    }

    console.log(
      `No se pudo encontrar informaci√≥n para el c√≥digo ${barcode} en ninguna API`
    );
    updateStatus("No se encontr√≥ informaci√≥n para este c√≥digo de barras");
    return null;
  } catch (error) {
    console.error("Error detallado al buscar producto:", error);
    updateStatus("Error al buscar producto");

    // Como √∫ltimo recurso, devolvemos un objeto gen√©rico usando nuestra funci√≥n dedicada
    return defaultProductFromBarcode(barcode);
  }
};

/**
 * Busca en Open Library por ISBN
 * @param {string} barcode
 * @returns {Promise<Object|null>}
 */
const searchOpenLibrary = async (barcode) => {
  try {
    // Open Library API para ISBNs
    const response = await fetch(
      `https://openlibrary.org/isbn/${barcode}.json`
    );

    if (!response.ok) return null;

    const data = await response.json();

    return {
      name: data.title,
      description: data.subtitle || `${data.title} - ISBN: ${barcode}`,
      // Devolver valores por defecto para los campos obligatorios
      price: 0,
      stock: 0,
    };
  } catch (error) {
    console.log("Error buscando en Open Library:", error);
    return null;
  }
};

/**
 * Busca en UPC Item DB
 * @param {string} barcode
 * @returns {Promise<Object|null>}
 */
const searchUPCItemDB = async (barcode) => {
  try {
    console.log(`Buscando c√≥digo de barras en UPC ItemDB: ${barcode}`);

    // Probar con un proxy CORS alternativo
    const corsProxy = "https://api.allorigins.win/get?url=";
    const targetUrl = `https://api.upcitemdb.com/prod/trial/lookup?upc=${barcode}`;

    const response = await fetch(
      `${corsProxy}${encodeURIComponent(targetUrl)}`
    );

    if (!response.ok) {
      console.log(`Error en la respuesta de UPC ItemDB: ${response.status}`);
      return null;
    }

    // Este proxy devuelve los datos en un campo "contents"
    const responseData = await response.json();
    if (!responseData.contents) {
      return null;
    }

    // Parsear el contenido que viene como string
    const data = JSON.parse(responseData.contents);

    // Verificar si encontramos resultados
    if (data.items && data.items.length > 0) {
      const item = data.items[0];
      console.log(`Producto encontrado: ${item.title}`);

      return {
        name: item.title,
        description: item.description || `UPC: ${barcode}`,
        price: item.lowest_recorded_price || 0,
        stock: 0, // Por defecto sin stock
      };
    }

    console.log(
      `No se encontraron resultados para el c√≥digo ${barcode} en UPC ItemDB`
    );
    return null;
  } catch (error) {
    console.error("Error detallado buscando en UPC Item DB:", error);
    return null;
  }
};

/**
 * Busca un c√≥digo de barras en internet en las APIs
 * @param {string} barcode - C√≥digo de barras a buscar
 * @returns {Promise<string|null>} - Datos del producto o null si falla
 */
const searchProductInAPIs = async (barcode) => {
  try {
    console.log(`Buscando informaci√≥n para el c√≥digo: ${barcode}`);

    // ========= M√âTODO 1: USAR API DE B√öSQUEDA DE PRODUCTOS =========
    try {
      // Para apps Electron, esta API funcionar√≠a mejor desde el proceso principal con Node.js
      // En un entorno web, podemos simular esto con una API m√°s permisiva
      const response = await fetch(
        `https://world.openfoodfacts.org/api/v0/product/${barcode}.json`,
        {
          cache: "no-store",
        }
      );

      if (response.ok) {
        const data = await response.json();
        if (data && data.status === 1) {
          console.log("‚úÖ Producto encontrado en base de datos OpenFoodFacts");
          return JSON.stringify(data);
        }
      }
    } catch (error) {
      console.warn("Error al buscar en OpenFoodFacts:", error.message);
    }

    // Si no se encuentra ninguna informaci√≥n, devolver un objeto simple
    console.log(
      "‚ùå No se encontr√≥ informaci√≥n en las bases de datos para:",
      barcode
    );

    return JSON.stringify({
      type: "not_found",
      barcode,
      message: `No se encontr√≥ informaci√≥n de este producto en las bases de datos.`,
      isHTML: false,
      searchFailed: true,
    });
  } catch (error) {
    console.error("Error al buscar informaci√≥n del producto:", error);
    return null;
  }
};

/**
 * Busca informaci√≥n de un c√≥digo de barras y devuelve resultados
 * @param {string} barcode - C√≥digo de barras a buscar
 * @returns {Promise<Object|null>} - Informaci√≥n del producto o null si no se encuentra
 */
export const searchProductOnline = async (barcode) => {
  console.log(`üîç Buscando informaci√≥n para el c√≥digo de barras: ${barcode}`);
  try {
    // Buscar el c√≥digo de barras usando nuestras APIs alternativas
    const resultData = await searchProductInAPIs(barcode);
    if (!resultData) {
      console.log("‚ùå No se pudo obtener informaci√≥n del producto");
      // Devolver un producto b√°sico con informaci√≥n limitada
      return {
        name: `Videojuego/Producto con c√≥digo ${barcode}`,
        description:
          "No se pudo encontrar informaci√≥n en l√≠nea. Es posible que necesites conexi√≥n a internet para buscar este c√≥digo.",
        barcode,
        price: 0,
        stock: 0,
        searchFailed: true,
      };
    }

    // Intentar parsear los resultados
    let data;
    try {
      data = JSON.parse(resultData);
    } catch (e) {
      console.warn("Error al parsear los resultados:", e.message);
      return defaultProductFromBarcode(barcode);
    }

    // Comprobar si no se encontr√≥ resultado
    if (data.type === "not_found") {
      console.log("‚ö†Ô∏è No se encontr√≥ informaci√≥n para el c√≥digo:", barcode);

      return {
        name: `Producto con c√≥digo ${barcode}`,
        description: data.message,
        barcode,
        price: 0,
        stock: 0,
        searchFailed: true,
      };
    }

    // Comprobar si es de Open Food Facts
    if (data.status === 1 && data.product) {
      const product = data.product;
      console.log(
        "‚úÖ Producto encontrado en Open Food Facts:",
        product.product_name
      );

      return {
        name: product.product_name || `Producto ${barcode}`,
        description: product.generic_name || `C√≥digo de barras: ${barcode}`,
        barcode,
        price: 0, // Open Food Facts no proporciona precios
        stock: 0,
        imageUrl: product.image_url,
        brand: product.brands,
        category: product.categories,
      };
    }

    // Si llegamos aqu√≠, tenemos datos pero no podemos interpretarlos
    console.log("‚ö†Ô∏è Datos recibidos pero en formato desconocido");
    return {
      name: `Producto con c√≥digo ${barcode}`,
      description:
        "Se encontr√≥ informaci√≥n pero no pudo ser procesada correctamente.",
      barcode,
      price: 0,
      stock: 0,
      rawData:
        typeof data === "object"
          ? JSON.stringify(data).substring(0, 200) + "..."
          : "Datos no disponibles",
    };
  } catch (error) {
    console.error(
      "‚ùå Error al buscar informaci√≥n del c√≥digo de barras:",
      error
    );
    // Devolver un objeto b√°sico para mantener la consistencia
    return defaultProductFromBarcode(barcode);
  }
};

/**
 * Crea un objeto de producto predeterminado basado en el c√≥digo de barras
 * @param {string} barcode - C√≥digo de barras
 * @returns {Object} Objeto de producto b√°sico
 */
export const defaultProductFromBarcode = (barcode) => {
  return {
    name: `Producto con c√≥digo ${barcode}`,
    description: `No se pudo encontrar informaci√≥n. C√≥digo de barras: ${barcode}`,
    price: 0,
    stock: 0,
  };
};
